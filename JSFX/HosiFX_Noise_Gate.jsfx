desc:HosiFX Noise Gate
version:1.0
author:Hosi Prod
changelog:
+ v1.0 - Initial release.
about:
  # HosiFX Noise Gate
    A simple and effective Noise Gate.
// Copyright 2024 HosiFX. All rights reserved.
// Lấy cảm hứng từ giao diện của MuseFX Noise Gate.

// --- Sliders ---
// Núm vặn "Threshold" chính, điều khiển ngưỡng của noise gate.
slider1:50<0,100,0.1>Threshold (%)
// Bộ chọn preset, được thiết kế cho các tác vụ noise gate.
slider2:0<0,11,1{Amp Noise,El Guitar DI,Funky Bass,Gated Drums,Speech,Vocal Booth,Tight Kick,Snare Gate,Tom Gate,Cymbal Bleed,Room Mic Crush,Aggressive Gate}>Preset

// --- I/O Pins ---
in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

// --- Options ---
options:gfx_hz=120
options:no_meter

@init
// --- Khởi tạo chung ---
gfx_clear=0;
tau = 2 * $pi;
// Biến trạng thái tương tác chuột.
dragging = 0;
// Cờ để kích hoạt cập nhật tham số.
caller = 1;

// --- Khởi tạo Gate ---
// Khởi tạo mức của bộ dò envelope và trạng thái gain.
env_db = -120;
gate_gain = 1;

// --- Tên Preset ---
// Danh sách này khớp với định nghĩa trong slider2.
preset_names.0 = "Amp Noise";
preset_names.1 = "El Guitar DI";
preset_names.2 = "Funky Bass";
preset_names.3 = "Gated Drums";
preset_names.4 = "Speech";
preset_names.5 = "Vocal Booth";
preset_names.6 = "Tight Kick";
preset_names.7 = "Snare Gate";
preset_names.8 = "Tom Gate";
preset_names.9 = "Cymbal Bleed";
preset_names.10 = "Room Mic Crush";
preset_names.11 = "Aggressive Gate";
num_presets = 12;

// --- Hàm tiện ích ---
function DB_TO_LINEAR(db) ( 10^(db/20); );
function LINEAR_TO_DB(lin) ( lin > 0 ? 20*log10(lin) : -120; );

// --- Định nghĩa tham số Preset ---
function update_parameters() (
  // Núm 'Threshold' (slider1) điều khiển ngưỡng.
  // 0% = ngưỡng thấp nhất (-60dB), 100% = ngưỡng cao nhất (0dB).
  amount = slider1 / 100;

  // Chọn preset dựa trên slider2
  preset = slider2|0;

  // Giá trị mặc định
  base_thresh_db = -40;
  attack_ms = 5;
  hold_ms = 10;
  release_ms = 100;
  range_db = -96; // Mức giảm gain

  // Định nghĩa tham số cho mỗi preset
  preset == 0 ? ( // Amp Noise
    base_thresh_db = -50; attack_ms = 2; release_ms = 80;
  ) : preset == 1 ? ( // El Guitar DI
    base_thresh_db = -45; attack_ms = 1; release_ms = 150;
  ) : preset == 2 ? ( // Funky Bass
    base_thresh_db = -35; attack_ms = 0.5; release_ms = 90;
  ) : preset == 3 ? ( // Gated Drums
    base_thresh_db = -25; attack_ms = 0.1; hold_ms = 50; release_ms = 200;
  ) : preset == 4 ? ( // Speech
    base_thresh_db = -40; attack_ms = 5; release_ms = 250;
  ) : preset == 5 ? ( // Vocal Booth
    base_thresh_db = -55; attack_ms = 3; release_ms = 180;
  ) : preset == 6 ? ( // Tight Kick
    base_thresh_db = -30; attack_ms = 0.5; hold_ms = 20; release_ms = 120;
  ) : preset == 7 ? ( // Snare Gate
    base_thresh_db = -32; attack_ms = 0.2; hold_ms = 80; release_ms = 220;
  ) : preset == 8 ? ( // Tom Gate
    base_thresh_db = -28; attack_ms = 1; hold_ms = 150; release_ms = 300;
  ) : preset == 9 ? ( // Cymbal Bleed
    base_thresh_db = -48; attack_ms = 10; release_ms = 50;
  ) : preset == 10 ? ( // Room Mic Crush
    base_thresh_db = -20; attack_ms = 0.1; hold_ms = 10; release_ms = 50;
  ) : preset == 11 ? ( // Aggressive Gate
    base_thresh_db = -22; attack_ms = 0.05; hold_ms = 5; release_ms = 80;
  );

  // Ngưỡng cuối cùng được điều chỉnh bởi núm vặn.
  // Cho phép điều chỉnh từ -60dB đến 0dB.
  current_thresh_db = -60 + (base_thresh_db + 60) * amount;

  // Tính toán hệ số cho bộ dò envelope và gain smoothing.
  attack_coeff = exp(-1 / (attack_ms * srate * 0.001));
  release_coeff = exp(-1 / (release_ms * srate * 0.001));
  gate_range_linear = DB_TO_LINEAR(range_db);
);

@slider
// Khi bất kỳ thanh trượt nào thay đổi, hãy đặt cờ 'caller'.
caller = 1;

@block
// Cập nhật tham số nếu một thanh trượt đã được di chuyển.
caller == 1 ? (
  update_parameters();
);

@sample
// --- Xử lý âm thanh thời gian thực ---

// Cập nhật tham số nếu một thanh trượt đã được di chuyển.
caller == 1 ? (
  update_parameters();
  caller = 0;
);

// --- Bộ dò Envelope ---
// Lấy mức đỉnh từ cả hai kênh.
peak_in = max(abs(spl0), abs(spl1));
peak_in_db = LINEAR_TO_DB(peak_in);

// Làm mịn mức đỉnh bằng attack và release.
env_db = peak_in_db > env_db ?
  peak_in_db + attack_coeff * (env_db - peak_in_db) :
  peak_in_db + release_coeff * (env_db - peak_in_db);

// --- Logic Gate ---
// Xác định trạng thái gate (mở hoặc đóng)
gate_open = env_db >= current_thresh_db;

// Làm mịn sự thay đổi gain để tránh tiếng click
target_gain = gate_open ? 1 : gate_range_linear;
gate_gain += (target_gain - gate_gain) * (gate_open ? 0.5 : 0.1); // Attack nhanh hơn release

// Áp dụng gain
spl0 *= gate_gain;
spl1 *= gate_gain;

@gfx 640 400
// --- Vẽ và tương tác GUI ---
w=gfx_w; h=gfx_h;
size = min(w,h);
is_retina = gfx_ext_flags & 1;

// --- Màu sắc và kích thước (Chủ đề Green) ---
bg_r=0.25; bg_g=0.6; bg_b=0.35;
knob_color_r=0.4; knob_color_g=0.8; knob_color_b=0.75;
text_color_r=0.95; text_color_g=0.98; text_color_b=0.98;
logo_color_r=0.95; logo_color_g=0.98; logo_color_b=0.98;
hosifx_logo_color_r = 0.3; hosifx_logo_color_g = 0.65; hosifx_logo_color_b = 0.4;
dot_color_r=0.3; dot_color_g=0.7; dot_color_b=0.45;
dot_active_color_r = 0.9;
dot_active_color_g = 0.95;
dot_active_color_b = 0.95;

knob_x = w/2;
knob_y = h/2 + size*0.05;
knob_r = size*0.3;
knob_w = size*0.08;
knob_inner_r = knob_r - knob_w;
knob_as = -tau * 0.625; // Góc bắt đầu (-225 độ)
knob_range = tau * 0.75; // Toàn bộ phạm vi góc (270 độ)

// --- Vẽ ---
gfx_a = 1;
gfx_aa = 1; // Bật khử răng cưa

// Nền
gfx_set(bg_r, bg_g, bg_b, 1);
gfx_rect(0,0,w,h);

// Các chấm chỉ báo xung quanh núm vặn
num_dots = 12;
i = 0;
loop(num_dots,
  angle = knob_as + (i / (num_dots-1)) * knob_range;
  dot_x = knob_x + cos(angle) * (knob_r + size*0.01);
  dot_y = knob_y + sin(angle) * (knob_r + size*0.01);
  dot_size = size * 0.012;

  // Tô màu các chấm dựa trên vị trí núm vặn
  (i / (num_dots-1) - 0.001 <= slider1/100) ?
    gfx_set(dot_active_color_r, dot_active_color_g, dot_active_color_b) :
    gfx_set(dot_color_r, dot_color_g, dot_color_b);

  gfx_circle(dot_x, dot_y, dot_size, 1);
  i+=1;
);

// Núm vặn chính
// Bóng đổ
gfx_set(0,0,0,0.2);
gfx_circle(knob_x, knob_y+size*0.015, knob_r, 1);
// Thân núm
gfx_set(0.9, 0.92, 0.92, 1); // Màu xám nhạt đồng nhất
gfx_circle(knob_x, knob_y, knob_r, 1);

// Vòng trong của núm
gfx_set(bg_r, bg_g, bg_b, 0.5);
gfx_circle(knob_x, knob_y, knob_inner_r, 1);

// Chỉ báo trên núm vặn
indicator_angle = knob_as + (slider1/100) * knob_range;
indicator_radius = knob_inner_r * 0.7;
indicator_x = knob_x + cos(indicator_angle) * indicator_radius;
indicator_y = knob_y + sin(indicator_angle) * indicator_radius;
indicator_size = size * 0.02;
gfx_set(0.2, 0.2, 0.2, 0.8);
gfx_circle(indicator_x, indicator_y, indicator_size, 1);

// --- Nhãn văn bản ---
gfx_set(text_color_r, text_color_g, text_color_b);

// Tên Preset
font_size_preset = size * 0.09;
gfx_setfont(1, "Arial", font_size_preset);
preset_name = preset_names[slider2|0];
gfx_measurestr(preset_name, preset_w, preset_h);
preset_x = knob_x - preset_w/2;
preset_y = knob_y - knob_r - size*0.18;
gfx_x = preset_x;
gfx_y = preset_y;
gfx_drawstr(preset_name);

// --- Logo và giá trị ---
// Giá trị Threshold (dB)
gfx_set(text_color_r, text_color_g, text_color_b);
font_size_val = size*0.05;
gfx_setfont(1, "Arial", font_size_val);
sprintf(#val_str, "%.1f dB", current_thresh_db);
gfx_measurestr(#val_str, val_w, val_h);
y_pos_val = h - val_h - size*0.055;
gfx_x = knob_x - val_w/2;
gfx_y = y_pos_val;
gfx_drawstr(#val_str);

// --- Logo NOISE GATE (trên giá trị) ---
gfx_set(logo_color_r, logo_color_g, logo_color_b);
font_size_logo_sub = size*0.05;
gfx_setfont(1, "Arial Narrow Bold", font_size_logo_sub);
gfx_measurestr("NOISE GATE", logo_sub_w, logo_sub_h);
y_pos_sub = y_pos_val - logo_sub_h;
gfx_x = w/2 - logo_sub_w/2;
gfx_y = y_pos_sub;
gfx_drawstr("NOISE GATE");

// --- Logo HOSIFX (trên cùng) ---
gfx_set(hosifx_logo_color_r, hosifx_logo_color_g, hosifx_logo_color_b);
font_size_logo_main = size*0.07;
gfx_setfont(1, "Arial Black", font_size_logo_main);
gfx_measurestr("HOSIFX", logo_main_w, logo_main_h);
y_pos_main = y_pos_sub - logo_main_h * 1.05;
gfx_x = w/2 - logo_main_w/2;
gfx_y = y_pos_main;
gfx_drawstr("HOSIFX");

// --- Logic tương tác chuột ---
mouse_down = mouse_cap & 1;
mouse_up = (last_mouse_cap & 1) && !mouse_down;

// Điều khiển núm chính bằng con lăn chuột
slider1 += mouse_wheel * 2.0;
slider1 = min(max(slider1, 0), 100);
mouse_wheel != 0 ? caller = 1;

// Kiểm tra thao tác nhấp và kéo trên núm chính
dist = sqrt((mouse_x-knob_x)^2+(mouse_y-knob_y)^2);
mouse_down && (dragging==0) && (dist <= knob_r) ? (
  dragging=1;
  drag_start_y=mouse_y;
  drag_start_val=slider1;
);

// Xử lý hành động kéo
(dragging==1) ? (
  sensitivity=(100/size)*0.4;
  delta=(drag_start_y-mouse_y)*sensitivity;
  old_slider1 = slider1;
  slider1=drag_start_val+delta;
  slider1=max(0,min(100,slider1));
  old_slider1 != slider1 ? caller = 1;
);

// Thả kéo khi nút chuột được nhả ra
mouse_up ? (
  dragging=0;
);

// Đặt lại con lăn chuột và lưu trạng thái chuột cuối cùng
mouse_wheel = 0;
last_mouse_cap = mouse_cap;
