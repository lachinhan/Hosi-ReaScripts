desc:HosiFX Compress
version:1.0
author:Hosi Prod
changelog:
+ v1.0 - Initial release.
about:
  # HosiFX Compress
    A simple and effective compressor.

// Copyright 2024 HosiFX. All rights reserved.

// --- Sliders ---
// Núm vặn "Amount" chính, điều khiển cường độ nén.
slider1:50<0,100,0.1>Amount (%)
// Bộ chọn preset. Tên được định nghĩa trong mục @init.
slider2:7<0,19,1{Acoustic Guitar,Bass Guitar,Drums Bus,Kick Drum,Mix Bus Aggro,Mix Bus Gentle,Opto Compress,Pop Vocals,Pumping Master,Snappy Snare,Squasher,Vocal Ride,Piano,Synth Bass,Synth Lead,Room Mics,Overheads,Parallel Comp,De-Esser,Limiter}>Preset

// --- I/O Pins ---
in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

// --- Options ---
options:gfx_hz=120
options:no_meter

@init
// --- Khởi tạo chung ---
gfx_clear=0;
tau=2*$pi;
// Biến trạng thái tương tác chuột.
dragging=0;
// Cờ để kích hoạt cập nhật tham số.
caller = 1;
// Khởi tạo mức của bộ dò envelope.
env_db = -120;

// --- Tên Preset ---
// Danh sách này khớp với định nghĩa trong slider2.
preset_names.0 = "Acoustic Guitar";
preset_names.1 = "Bass Guitar";
preset_names.2 = "Drums Bus";
preset_names.3 = "Kick Drum";
preset_names.4 = "Mix Bus Aggro";
preset_names.5 = "Mix Bus Gentle";
preset_names.6 = "Opto Compress";
preset_names.7 = "Pop Vocals";
preset_names.8 = "Pumping Master";
preset_names.9 = "Snappy Snare";
preset_names.10 = "Squasher";
preset_names.11 = "Vocal Ride";
preset_names.12 = "Piano";
preset_names.13 = "Synth Bass";
preset_names.14 = "Synth Lead";
preset_names.15 = "Room Mics";
preset_names.16 = "Overheads";
preset_names.17 = "Parallel Comp";
preset_names.18 = "De-Esser";
preset_names.19 = "Limiter";
num_presets = 20;

// --- Hàm tiện ích ---
// Chuyển đổi giá trị decibel thành hệ số khuếch đại tuyến tính.
function DB_TO_LINEAR(db) (
  10^(db/20);
);
// Chuyển đổi hệ số khuếch đại tuyến tính thành decibel (phiên bản an toàn).
function LINEAR_TO_DB(lin) (
  lin > 0 ? 20*log10(lin) : -120;
);

// --- Định nghĩa tham số Preset ---
// Hàm này được gọi khi preset hoặc núm amount thay đổi.
function update_parameters() (
  // Núm 'Amount' (slider1) chủ yếu điều khiển ngưỡng (threshold).
  amount = slider1 / 100;

  // Chọn preset dựa trên slider2
  preset = slider2|0;

  // Giá trị mặc định
  thresh_db = 0;
  ratio = 4;
  attack_ms = 10;
  release_ms = 100;
  makeup_db = 0;
  
  // Định nghĩa tham số cho mỗi preset
  preset == 0 ? ( // Acoustic Guitar
    thresh_db = -24; ratio = 3.5; attack_ms = 5; release_ms = 150; makeup_db = 4;
  ) : preset == 1 ? ( // Bass Guitar
    thresh_db = -20; ratio = 4; attack_ms = 15; release_ms = 80; makeup_db = 5;
  ) : preset == 2 ? ( // Drums Bus
    thresh_db = -18; ratio = 2.5; attack_ms = 30; release_ms = 100; makeup_db = 3;
  ) : preset == 3 ? ( // Kick Drum
    thresh_db = -16; ratio = 6; attack_ms = 1; release_ms = 120; makeup_db = 6;
  ) : preset == 4 ? ( // Mix Bus Aggro
    thresh_db = -12; ratio = 4; attack_ms = 10; release_ms = 120; makeup_db = 4;
  ) : preset == 5 ? ( // Mix Bus Gentle
    thresh_db = -14; ratio = 1.8; attack_ms = 30; release_ms = 100; makeup_db = 2;
  ) : preset == 6 ? ( // Opto Compress
    thresh_db = -22; ratio = 3; attack_ms = 10; release_ms = 500; makeup_db = 5; // Release chậm
  ) : preset == 7 ? ( // Pop Vocals
    thresh_db = -20; ratio = 4; attack_ms = 3; release_ms = 150; makeup_db = 6;
  ) : preset == 8 ? ( // Pumping Master
    thresh_db = -15; ratio = 8; attack_ms = 10; release_ms = 50; makeup_db = 5;
  ) : preset == 9 ? ( // Snappy Snare
    thresh_db = -18; ratio = 5; attack_ms = 0.5; release_ms = 200; makeup_db = 7;
  ) : preset == 10 ? ( // Squasher
    thresh_db = -30; ratio = 20; attack_ms = 2; release_ms = 50; makeup_db = 10; // Ratio cao
  ) : preset == 11 ? ( // Vocal Ride
    thresh_db = -28; ratio = 2.5; attack_ms = 20; release_ms = 300; makeup_db = 4;
  ) : preset == 12 ? ( // Piano
    thresh_db = -22; ratio = 2.5; attack_ms = 15; release_ms = 250; makeup_db = 3;
  ) : preset == 13 ? ( // Synth Bass
    thresh_db = -18; ratio = 5; attack_ms = 5; release_ms = 60; makeup_db = 6;
  ) : preset == 14 ? ( // Synth Lead
    thresh_db = -20; ratio = 4; attack_ms = 2; release_ms = 100; makeup_db = 5;
  ) : preset == 15 ? ( // Room Mics
    thresh_db = -25; ratio = 10; attack_ms = 5; release_ms = 40; makeup_db = 12;
  ) : preset == 16 ? ( // Overheads
    thresh_db = -15; ratio = 3; attack_ms = 1; release_ms = 200; makeup_db = 2;
  ) : preset == 17 ? ( // Parallel Comp
    thresh_db = -35; ratio = 20; attack_ms = 0.1; release_ms = 25; makeup_db = 15;
  ) : preset == 18 ? ( // De-Esser
    thresh_db = -20; ratio = 8; attack_ms = 0.1; release_ms = 20; makeup_db = 0;
  ) : preset == 19 ? ( // Limiter
    thresh_db = -10; ratio = 100; attack_ms = 0.5; release_ms = 50; makeup_db = 8;
  );

  // Núm "Amount" điều chỉnh ngưỡng.
  current_thresh_db = thresh_db * amount;
  
  // Tính toán hệ số attack và release cho bộ dò envelope.
  attack_coeff = exp(-1 / (attack_ms * srate * 0.001));
  release_coeff = exp(-1 / (release_ms * srate * 0.001));
);

@slider
// Khi bất kỳ thanh trượt nào thay đổi, hãy đặt cờ 'caller'.
caller = 1;

@block
// Cập nhật tham số nếu một thanh trượt đã được di chuyển.
caller == 1 ? (
  update_parameters();
);

@sample
// --- Xử lý âm thanh thời gian thực ---

// Cập nhật tham số nếu một thanh trượt đã được di chuyển.
caller == 1 ? (
  update_parameters();
  caller = 0;
);

// Lấy mức đỉnh từ cả hai kênh cho bộ dò envelope.
peak_in = max(abs(spl0), abs(spl1));
peak_in_db = LINEAR_TO_DB(peak_in);

// Bộ dò envelope: làm mịn mức đỉnh bằng attack và release.
env_db = peak_in_db > env_db ?
  peak_in_db + attack_coeff * (env_db - peak_in_db) :
  peak_in_db + release_coeff * (env_db - peak_in_db);

// --- Tính toán giảm khuếch đại (Gain Reduction) ---
gain_reduction_db = 0;
// Tính toán tín hiệu vượt ngưỡng bao nhiêu.
over_thresh_db = env_db - current_thresh_db;

// Nếu vượt ngưỡng, tính toán giảm khuếch đại dựa trên tỷ lệ (ratio).
over_thresh_db > 0 ? (
  gain_reduction_db = over_thresh_db * (1.0 - 1.0 / ratio);
);

// --- Áp dụng Gain ---
// Tính toán gain cuối cùng để áp dụng (makeup gain - gain reduction).
total_gain_db = makeup_db * amount - gain_reduction_db;
// Chuyển đổi tổng gain từ dB sang một số nhân tuyến tính.
gain_linear = DB_TO_LINEAR(total_gain_db);

// Áp dụng gain đã tính cho cả hai kênh.
spl0 *= gain_linear;
spl1 *= gain_linear;

@gfx 640 400
// --- Vẽ và tương tác GUI ---
w=gfx_w; h=gfx_h;
size = min(w,h);
is_retina = gfx_ext_flags & 1;

// --- Màu sắc và kích thước (Giao diện gốc) ---
bg_r=0.92; bg_g=0.92; bg_b=0.93;
knob_color_r=0.25; knob_color_g=0.4; knob_color_b=0.85;
text_color_r=0.2; text_color_g=0.2; text_color_b=0.2;
logo_color_r=0.5; logo_color_g=0.5; logo_color_b=0.5;
dot_color_r=0.7; dot_color_g=0.7; dot_color_b=0.7;

knob_x = w/2;
knob_y = h/2;
knob_r = size*0.35;
knob_w = size*0.1;
knob_inner_r = knob_r - knob_w;
knob_as = -tau * 0.625; // Góc bắt đầu (-225 độ)
knob_range = tau * 0.75; // Toàn bộ phạm vi góc (270 độ)

// --- Vẽ ---
gfx_aa = 1; // Bật khử răng cưa

// Nền
gfx_set(bg_r, bg_g, bg_b, 1);
gfx_rect(0,0,w,h);

// Vệt nền của núm vặn
gfx_set(0.85, 0.85, 0.85, 1);
gfx_arc(knob_x, knob_y, knob_r - knob_w/2, knob_as, knob_range, knob_w, 1);

// Các chấm chỉ báo xung quanh núm vặn
num_dots = 12;
i = 0;
loop(num_dots,
  angle = knob_as + (i / (num_dots-1)) * knob_range;
  dot_x = knob_x + cos(angle) * (knob_r - knob_w/2);
  dot_y = knob_y + sin(angle) * (knob_r - knob_w/2);
  dot_size = size * 0.015;
  
  // Tô màu các chấm dựa trên vị trí núm vặn
  (i / (num_dots-1) - 0.001 <= slider1/100) ?
    gfx_set(knob_color_r, knob_color_g, knob_color_b, 1) :
    gfx_set(dot_color_r, dot_color_g, dot_color_b, 1);
  
  gfx_circle(dot_x, dot_y, dot_size, 1, 1);
  i+=1;
);

// Vòng tròn trung tâm núm vặn (hiệu ứng hình ảnh)
gfx_set(bg_r, bg_g, bg_b, 1);
gfx_circle(knob_x, knob_y, knob_inner_r, 1, 1);
// Thêm bóng mờ cho núm vặn để tạo chiều sâu
gfx_set(0,0,0,0.1);
gfx_circle(knob_x, knob_y, knob_inner_r, 1, 0);

// Chỉ báo trên núm vặn
indicator_angle = knob_as + (slider1/100) * knob_range;
indicator_radius = knob_inner_r * 0.75;
indicator_x = knob_x + cos(indicator_angle) * indicator_radius;
indicator_y = knob_y + sin(indicator_angle) * indicator_radius;
indicator_size = size * 0.02;
gfx_set(knob_color_r, knob_color_g, knob_color_b, 1);
gfx_circle(indicator_x, indicator_y, indicator_size, 1, 1);


// --- Nhãn văn bản ---
gfx_set(text_color_r, text_color_g, text_color_b, 1);

// Tên Preset
font_size_preset = size * 0.08;
gfx_setfont(1, "Arial", font_size_preset);
preset_name = preset_names[slider2|0];
gfx_measurestr(preset_name, preset_w, preset_h);
gfx_x = knob_x - preset_w/2;
gfx_y = knob_y - knob_r - size*0.15;
gfx_drawstr(preset_name);

// --- Logo và giá trị (sắp xếp lại) ---

// Giá trị Amount (%)
font_size_val = size*0.05;
gfx_setfont(1, "Arial", font_size_val);
sprintf(#val_str, "%.1f %%", slider1);
gfx_measurestr(#val_str, val_w, val_h);
y_pos_val = h - val_h - size*0.11; // Đã điều chỉnh vị trí cao hơn
gfx_x = knob_x - val_w/2;
gfx_y = y_pos_val;
gfx_drawstr(#val_str);

// Logo COMPRESS (trên giá trị)
font_size_logo_sub = size*0.04;
gfx_setfont(1, "Arial Narrow Bold", font_size_logo_sub);
gfx_measurestr("COMPRESS", logo_sub_w, logo_sub_h);
y_pos_sub = y_pos_val - logo_sub_h;
gfx_x = w/2 - logo_sub_w/2;
gfx_y = y_pos_sub;
gfx_drawstr("COMPRESS");

// Logo HOSIFX (trên cùng)
gfx_set(logo_color_r, logo_color_g, logo_color_b, 1);
font_size_logo_main = size*0.06;
gfx_setfont(1, "Arial Black", font_size_logo_main);
gfx_measurestr("HOSIFX", logo_main_w, logo_main_h);
y_pos_main = y_pos_sub - logo_main_h * 1.05;
gfx_x = w/2 - logo_main_w/2;
gfx_y = y_pos_main;
gfx_drawstr("HOSIFX");


// --- Logic tương tác chuột ---
mouse_down = mouse_cap & 1;
mouse_up = (last_mouse_cap & 1) && !mouse_down;

// Điều khiển núm chính bằng con lăn chuột
slider1 += mouse_wheel * 2.0;
slider1 = min(max(slider1, 0), 100);
mouse_wheel != 0 ? caller = 1;

// Kiểm tra thao tác nhấp và kéo trên núm chính
dist = sqrt((mouse_x-knob_x)^2+(mouse_y-knob_y)^2);
mouse_down && (dragging==0) && (dist <= knob_r) ? (
  dragging=1;
  drag_start_y=mouse_y;
  drag_start_val=slider1;
);

// Xử lý hành động kéo
(dragging==1) ? (
  sensitivity=(100/size)*0.4;
  delta=(drag_start_y-mouse_y)*sensitivity;
  old_slider1 = slider1;
  slider1=drag_start_val+delta;
  slider1=max(0,min(100,slider1));
  old_slider1 != slider1 ? caller = 1;
);

// Thả kéo khi nút chuột được nhả ra
mouse_up ? (
  dragging=0;
);

// Đặt lại con lăn chuột và lưu trạng thái chuột cuối cùng
mouse_wheel = 0;
last_mouse_cap = mouse_cap;
