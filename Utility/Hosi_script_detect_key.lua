--[[
@description Detect Key for Selected Media Items (using trackanalyzer.jar)
@author      Hosi Prod (Modified with console toggle)
@version     1.0
@changelog
  v1.0 05-Aug-2025: Initial release.
@provides
  [main] . > Hosi_Detect Key for Selected Media Items.lua

@about
  This script detects the musical key of selected media items using the external tool 'trackanalyzer.jar'.
  The result is appended to the active take's name.

  INSTRUCTIONS:
  1. Make sure you have Java installed on your system and that 'java.exe' is in your system's PATH.
  2. Download 'TrackAnalyzer.jar' from: https://github.com/tfriedel/trackanalyzer
  3. Download the 'jaudiotagger' library JAR from a trusted source like Maven Repository. The script will find it as long as the name starts with 'jaudiotagger'.
     Link: https://mvnrepository.com/artifact/com.github.goxr3plus/jaudiotagger
  4. IMPORTANT: Place BOTH 'TrackAnalyzer.jar' AND the jaudiotagger JAR file
     (e.g., 'jaudiotagger-2.2.5.jar') in the same directory as this script.
	
	See more at https://www.lachinhan.xyz/2025/08/key.html
--]]
local show_console = false local reaper = reaper local function CPrint(message) if show_console then reaper.ShowConsoleMsg(message) end end function ConvertKeyToStandard(detected_key) local key_map = { ["1B"] = "B Major", ["2B"] = "F# Major", ["3B"] = "Db Major", ["4B"] = "Ab Major", ["5B"] = "Eb Major", ["6B"] = "Bb Major", ["7B"] = "F Major", ["8B"] = "C Major", ["9B"] = "G Major", ["10B"] = "D Major", ["11B"] = "A Major", ["12B"] = "E Major", ["1A"] = "G# Minor", ["2A"] = "D# Minor", ["3A"] = "A# Minor", ["4A"] = "F Minor", ["5A"] = "C Minor", ["6A"] = "G Minor", ["7A"] = "D Minor", ["8A"] = "A Minor", ["9A"] = "E Minor", ["10A"] = "B Minor", ["11A"] = "F# Minor", ["12A"] = "C# Minor" } return key_map[detected_key] end function CheckJavaInstallation() CPrint("Checking Java installation...\n") local handle = io.popen("java -version 2>&1") if not handle then reaper.ShowMessageBox("Could not execute 'java' command. Please ensure Java is installed and its 'bin' directory is in your system's PATH environment variable.", "Java Not Found", 0) return false end local output = handle:read("*a") handle:close() if output:match("java version") or output:match("openjdk version") then CPrint("Java installation detected.\n") return true else reaper.ShowMessageBox("Could not verify Java installation. The 'java -version' command returned an unexpected output. Please check your Java setup.\n\nOutput from command:\n" .. output, "Java Check Failed", 0) return false end end function FindFileByPattern(directory, pattern) local command local os_name = reaper.GetOS() if os_name == "Win32" or os_name == "Win64" then local win_directory = directory:gsub("/", "\\") command = 'dir /b "' .. win_directory .. pattern .. '"' else command = 'find "' .. directory .. '" -name "' .. pattern .. '" -maxdepth 1' end local handle = io.popen(command) if not handle then return nil end local filepath = handle:read("*a") handle:close() filepath = filepath:match("([^\r\n]+)") if filepath and filepath ~= "" then if os_name == "Win32" or os_name == "Win64" then return directory .. filepath else return filepath end end return nil end function GetPaths() local script_path = ({reaper.get_action_context()})[2] if not script_path or script_path == "" then reaper.ShowMessageBox("Could not determine the script path.", "Error", 0) return nil end local script_folder = script_path:match("(.*[/\\])") script_folder = script_folder:gsub("\\", "/") local track_analyzer_path = script_folder .. "TrackAnalyzer.jar" if not reaper.file_exists(track_analyzer_path) then reaper.ShowMessageBox("'TrackAnalyzer.jar' not found.\n\nPlease download it and place it in the script directory:\n\n" .. script_folder, "File Not Found", 0) return nil end local jaudiotagger_path = FindFileByPattern(script_folder, "jaudiotagger*.jar") if not jaudiotagger_path then reaper.ShowMessageBox("'jaudiotagger' JAR file not found.\n\nPlease double-check that the file exists in the script directory and that its name starts with 'jaudiotagger' (e.g., 'jaudiotagger-2.2.5.jar').\n\nScript Directory:\n" .. script_folder, "Dependency Not Found", 0) return nil end jaudiotagger_path = jaudiotagger_path:gsub("\\", "/") return script_folder, jaudiotagger_path end function DetectKeyForMediaItem(item, script_folder, jaudiotagger_path) local take = reaper.GetActiveTake(item) if not take then return end local source = reaper.GetMediaItemTake_Source(take) if not source then return end local file_path = reaper.GetMediaSourceFileName(source, "") if not file_path or file_path == "" then CPrint("Error: Could not get file path for item.\n") return end CPrint("Processing: " .. file_path .. "\n") local output local os_name = reaper.GetOS() local command if os_name == "Win32" or os_name == "Win64" then local cmd_script_folder = script_folder:gsub("/", "\\") local cmd_file_path = file_path:gsub("/", "\\") command = string.format('cd /d "%s" && java -jar TrackAnalyzer.jar --nobpm "%s"', cmd_script_folder, cmd_file_path) else command = string.format('cd "%s" && java -jar TrackAnalyzer.jar --nobpm "%s"', script_folder, file_path) end CPrint("DEBUG: Executing command: " .. command .. "\n") local handle = io.popen(command .. " 2>&1") if not handle then CPrint("Error: Could not execute command.\n") return end output = handle:read("*a") handle:close() local detected_key = output:match("key:%s*(%S+)") if detected_key then local standard_key = ConvertKeyToStandard(detected_key) local display_key = detected_key if standard_key then display_key = string.format("%s - %s", detected_key, standard_key) end local old_name = reaper.GetTakeName(take) local clean_name = old_name:gsub("%s*%[.-%]$", "") local new_name = string.format("%s [%s]", clean_name, display_key) reaper.GetSetMediaItemTakeInfo_String(take, "P_NAME", new_name, true) CPrint("Success: " .. display_key .. " -> Take name updated.\n") else CPrint("Failed: Could not detect key. Diagnostic output:\n" .. output .. "\n") CPrint("------------------------------------------------------------------\n") CPrint("ANALYSIS:\n") CPrint("The script failed. Please review the 'Diagnostic output' above.\n") CPrint("Key things to check in the output:\n") CPrint("1. Did the script successfully change to the correct directory?\n") CPrint("2. Is the Java execution producing an error? The '--nobpm' flag was added to prevent crashes during BPM analysis. If it still fails, the issue may be deeper in the key analysis logic.\n") CPrint("3. If you see 'UnsupportedClassVersionError', your Java version may be too old for the JAR files.\n") CPrint("------------------------------------------------------------------\n") end end function Main() if show_console then reaper.ClearConsole() end CPrint("Starting Key Detection Script...\n") if not CheckJavaInstallation() then return end local script_folder, jaudiotagger_path = GetPaths() if not script_folder then return end local selected_items_count = reaper.CountSelectedMediaItems(0) if selected_items_count == 0 then reaper.ShowMessageBox("Please select at least one media item.", "No Items Selected", 0) return end reaper.Undo_BeginBlock() for i = 0, selected_items_count - 1 do local item = reaper.GetSelectedMediaItem(0, i) DetectKeyForMediaItem(item, script_folder, jaudiotagger_path) end reaper.Undo_EndBlock("Detect Key for " .. selected_items_count .. " items", -1) reaper.UpdateArrange() CPrint("Finished!\n") end Main()
