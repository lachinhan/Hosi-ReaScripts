--[[
@description Demucs Stem Separator (GUI Version)
@version 1.1
@author Hosi
@changelog
  + v1.1 - Added cross-platform support for Windows, macOS, and Linux.
  + v1.0 - Initial release.
@about
  - Displays a window to select an AI Model and processing device (CPU/GPU),
    then separates the selected audio item. Includes a GPU compatibility check.
  - This version is modified to run on Windows, macOS, and Linux.
  - Requirements: ReaImGui must be installed via ReaPack.
@depends ReaTeam Extensions/API/reaper_imgui.ext
--]]
if not reaper.ImGui_GetBuiltinPath then reaper.ShowMessageBox("ReaImGui library not found or could not be loaded.\n\nPlease install 'ReaImGui: ReaScript binding for Dear ImGui' via ReaPack, then restart REAPER.", "Library Not Found", 0) return end package.path = reaper.ImGui_GetBuiltinPath() .. '/?.lua;' .. package.path local ok, imgui_loader = pcall(require, 'imgui') if not ok then reaper.ShowMessageBox("Could not find the ReaImGui module.\n\nError: " .. tostring(imgui_loader) .. "\n\nPlease ensure ReaImGui is installed correctly via ReaPack and REAPER has been restarted.", "Library Load Error", 0) return end local ok_init, ImGui = pcall(imgui_loader, '0.9.3') if not ok_init then reaper.ShowMessageBox("An error occurred while initializing the ReaImGui library.\n\nError: " .. tostring(ImGui) .. "\n\nYour ReaImGui version might be outdated. Please try updating it via ReaPack.", "ReaImGui Init Error", 0) return end local script_title = "Demucs AI Separator (Cross-Platform)" local ctx = ImGui.CreateContext(script_title) local models = { "htdemucs_ft", "htdemucs_6s", "htdemucs" } local model_names = { "High Quality (4 Stems)", "6 Stems (Guitar/Piano)", "Standard (Faster)" } local current_model_idx = 1 local use_gpu = false local window_is_open = true local status_message = "Ready. Please select an audio item." function Msg(str) reaper.ShowConsoleMsg(tostring(str) .. "\n") end function GetPathAndFile(full_path) local sep = package.config:sub(1, 1) local i = string.len(full_path) while i > 0 do if string.sub(full_path, i, i) == sep then break end i = i - 1 end if i == 0 then return ".", full_path end local path = string.sub(full_path, 1, i - 1) local file = string.sub(full_path, i + 1) return path, file end function RunSeparation(model_name, use_gpu_flag) local is_windows = package.config:sub(1, 1) == '\\' local python_cmd = is_windows and "py" or "python3" local command_prefix = is_windows and "cmd /c " or "" if use_gpu_flag then status_message = "Checking GPU compatibility..." reaper.defer(function() end) local check_script = "import torch; exit(0) if torch.cuda.is_available() else exit(1)" local check_command = command_prefix .. python_cmd .. ' -c "' .. check_script .. '"' local gpu_ok = os.execute(check_command) if gpu_ok ~= 0 and gpu_ok ~= true then reaper.ShowMessageBox("GPU Not Compatible or Not Found.\n\nPyTorch could not detect a compatible NVIDIA GPU. This can be caused by:\n\n1. An incompatible graphics card (e.g., AMD, Intel on macOS).\n2. Outdated NVIDIA drivers.\n3. An incorrect PyTorch/CUDA installation.\n\nPlease uncheck 'Use GPU' and try again with CPU processing.", "GPU Error", 0) status_message = "GPU check failed. Please use CPU." return end status_message = "GPU check passed." reaper.defer(function() end) end local project_path, _ = reaper.GetProjectPath("") if project_path == "" then reaper.ShowMessageBox("Please save your project before running.", "Error: Project Not Saved", 0) return end if reaper.CountSelectedMediaItems(0) ~= 1 then reaper.ShowMessageBox("Please select exactly one audio item to process.", "Error", 0) return end local item = reaper.GetSelectedMediaItem(0, 0) local take = reaper.GetActiveTake(item) if not take or reaper.TakeIsMIDI(take) then reaper.ShowMessageBox("The selected item is not a valid audio item.", "Error", 0) return end local source_path_full = reaper.GetMediaSourceFileName(reaper.GetMediaItemTake_Source(take), "") if source_path_full == "" then reaper.ShowMessageBox("Could not get the file path. Please save the project and ensure the item has a source file.", "Error", 0) return end status_message = "Processing... REAPER may become unresponsive." reaper.defer(function() end) reaper.Undo_BeginBlock() local _, source_filename = GetPathAndFile(source_path_full) local source_filename_no_ext = source_filename:match("(.+)%..+") or source_filename local sep = package.config:sub(1, 1) local output_dir = project_path .. sep .. "Demucs Stems" local device = use_gpu_flag and "cuda" or "cpu" local core_command = python_cmd .. ' -m demucs -n ' .. model_name .. ' -d ' .. device .. ' -o "' .. output_dir .. '" "' .. source_path_full .. '"' local full_command = command_prefix .. core_command Msg("Executing command: " .. full_command) local exit_code = os.execute(full_command) Msg("Demucs process finished with exit code: " .. tostring(exit_code)) if exit_code ~= 0 and exit_code ~= true then reaper.ShowMessageBox("Demucs encountered an error (exit code: " .. tostring(exit_code) .. "). Please check the REAPER console for details.", "Demucs Execution Error", 0) reaper.Undo_EndBlock("Separate Stems with Demucs (failed)", -1) status_message = "Separation failed. Check console." return end Msg("Importing stems...") local base_output_folder = output_dir .. sep .. model_name .. sep .. source_filename_no_ext .. sep local stems_to_import = { { file = "vocals.wav", name = "Vocals" }, { file = "drums.wav", name = "Drums" }, { file = "bass.wav", name = "Bass" }, { file = "other.wav", name = "Other" } } if model_name == "htdemucs_6s" then table.insert(stems_to_import, { file = "guitar.wav", name = "Guitar" }) table.insert(stems_to_import, { file = "piano.wav", name = "Piano" }) end local imported_count = 0 local original_item_pos = reaper.GetMediaItemInfo_Value(item, "D_POSITION") for _, stem_info in ipairs(stems_to_import) do local stem_folder_name = stem_info.file:match("(.+)%..+") local new_structure_path = base_output_folder .. stem_folder_name .. sep .. stem_info.file local old_structure_path = base_output_folder .. stem_info.file local stem_path = reaper.file_exists(new_structure_path) and new_structure_path or (reaper.file_exists(old_structure_path) and old_structure_path or "") if stem_path ~= "" then local num_tracks_before = reaper.CountTracks(0) if reaper.InsertMedia(stem_path, 1) > 0 then local new_track = reaper.GetTrack(0, num_tracks_before) if new_track then local new_item = reaper.GetTrackMediaItem(new_track, 0) if new_item then reaper.GetSetMediaTrackInfo_String(new_track, "P_NAME", stem_info.name, true) reaper.SetMediaItemInfo_Value(new_item, "D_POSITION", original_item_pos) imported_count = imported_count + 1 end end end else Msg("WARNING: Stem file not found: " .. stem_info.name) end end if imported_count > 0 then reaper.SetMediaItemInfo_Value(item, "B_MUTE", 1) status_message = "Success! Imported " .. imported_count .. " stems." else reaper.ShowMessageBox("No stem files were found. Please check the REAPER console for details.", "Import Error", 0) status_message = "No stem files found after processing." end reaper.Undo_EndBlock("Separate Stems with Demucs", -1) reaper.UpdateArrange() end function MainLoop() ImGui.SetNextWindowSize(ctx, 400, 240, ImGui.Cond_Once) local is_visible, is_open = ImGui.Begin(ctx, script_title, true) if is_visible then ImGui.Text(ctx, "Separation Settings:") ImGui.Separator(ctx) ImGui.Text(ctx, "AI Model:") for i, name in ipairs(model_names) do if ImGui.RadioButton(ctx, name, current_model_idx == i) then current_model_idx = i end end ImGui.Separator(ctx) ImGui.Text(ctx, "Processing Device:") ImGui.SameLine(ctx) local gpu_changed, new_gpu_val = ImGui.Checkbox(ctx, "Use GPU (requires NVIDIA card)", use_gpu) if gpu_changed then use_gpu = new_gpu_val end ImGui.Separator(ctx) if ImGui.Button(ctx, "Run Separation", -1, 50) then RunSeparation(models[current_model_idx], use_gpu) end ImGui.Separator(ctx) ImGui.Text(ctx, "Status: " .. status_message) ImGui.End(ctx) end if not is_open then window_is_open = false end if window_is_open then reaper.defer(MainLoop) end end reaper.defer(MainLoop)
