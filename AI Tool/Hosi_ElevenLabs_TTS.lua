--[[
@description Hosi - ElevenLabs TTS (Multi-Item Version)
@version 1.1
@author Hosi
@about
  - A helper script to generate TTS using the ElevenLabs API.
  - Supports generating audio from the text box or from the notes of multiple selected items.
@changelog
  + v1.1 (2025-07-11)
    - FIXED: Input stability and similarity_boost.
  + v1.0 (2025-07-09)
    - Initial release.
@reaper_version 7.0
@depends ReaTeam Extensions/API/reaper_imgui.ext
--]]
if not reaper.ImGui_CreateContext then reaper.ShowMessageBox("This script requires the ReaImGui extension.\n\nPlease install it from ReaPack (under the 'Extensions' section) and restart REAPER.", "Error: ReaImGui Not Found", 0) return end local reaper_imgui = reaper.ImGui_CreateContext("ElevenLabs Text-to-Speech") local settings_file = reaper.GetResourcePath() .. '/hosi_elevenlabs_settings.txt' local path_sep = reaper.GetOS():find("Win") and "\\" or "/" local api_keys_string = "" local voice_id = "" local stability = "0.7" local similarity_boost = "0.7" local input_text = "Hello! This is a test of the ElevenLabs text-to-speech engine." function string.split(inputstr, sep) if sep == nil then sep = "%s" end local t={} for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do table.insert(t, str:match("^%s*(.-)%s*$")) end return t end function load_settings() local file = io.open(settings_file, "r") if file then api_keys_string = file:read("*line") or api_keys_string voice_id = file:read("*line") or voice_id stability = file:read("*line") or stability similarity_boost = file:read("*line") or similarity_boost file:close() end end function save_settings() local file = io.open(settings_file, "w") if file then file:write(api_keys_string .. "\n") file:write(voice_id .. "\n") file:write(stability .. "\n") file:write(similarity_boost .. "\n") file:close() end end function escape_json_text(text) local result = text:gsub('\\', '\\\\'):gsub('"', '\\"'):gsub("\n", "\\n"):gsub("\r", "\\r"):gsub("[\b\f]", function(c) return string.format("\\%s", c) end):gsub("[%z\1-\31]", function(c) return string.format("\\u%04x", string.byte(c)) end) return result end function generate_unique_filename(text) local timestamp = os.date("%Y%m%d_%H%M%S") local words = {} for word in text:gmatch("%w+") do table.insert(words, word) if #words >= 3 then break end end local abbreviation = table.concat(words, "_") return "TTS_ElevenLabs_" .. timestamp .. "_" .. abbreviation .. ".mp3" end function set_item_note_to_text(item, note) reaper.ULT_SetMediaItemNote(item, note) end function set_item_name_with_suffix(item, base_name, suffix) local take = reaper.GetActiveTake(item) if take then local new_name = base_name:gsub("%.mp3$", "") .. suffix reaper.GetSetMediaItemTakeInfo_String(take, "P_NAME", new_name, true) end end function generate_single_audio(text, position, track) if not text or text:match("^%s*$") then reaper.ShowMessageBox("Input text is empty.", "Info", 0) return false end if not voice_id or voice_id:match("^%s*$") then reaper.ShowMessageBox("Voice ID is not set. Please enter a valid Voice ID in Settings.", "Error", 0) return false end local keys_to_try = string.split(api_keys_string, ",") if #keys_to_try == 0 or (#keys_to_try == 1 and keys_to_try[1] == "") then reaper.ShowMessageBox("No API Keys found. Please add keys in Settings.", "Error", 0) return false end local escaped_text = escape_json_text(text) local project_path = reaper.GetProjectPath("") if project_path == "" then reaper.ShowMessageBox("Please save the project first.", "Error", 0) return false end local unique_filename = generate_unique_filename(text) local output_file_path = project_path .. path_sep .. unique_filename local audio_generated = false for _, current_api_key in ipairs(keys_to_try) do local clean_key = current_api_key:match("^%s*(.-)%s*$") if clean_key and #clean_key > 10 then local ps_command = string.format([[powershell -NoProfile -Command "try { Invoke-WebRequest -Uri 'https://api.elevenlabs.io/v1/text-to-speech/%s' -Method POST -Headers @{'xi-api-key'='%s'; 'accept'='audio/mpeg'; 'Content-Type'='application/json'} -Body '{\"text\": \"%s\", \"voice_settings\": {\"stability\": %s, \"similarity_boost\": %s}}' -OutFile '%s'; Write-Host 'Success' } catch { Write-Host ('API_ERROR: ' + $_.Exception.ToString()); exit 1 } 2>&1"]], voice_id, clean_key, escaped_text, stability, similarity_boost, output_file_path) local handle = io.popen(ps_command) local result_output = handle:read("*a") or "" handle:close() if result_output:match("Success") and reaper.file_exists(output_file_path) then reaper.SetEditCurPos(position, false, false) local items_before = {} for i = 0, reaper.CountTrackMediaItems(track) - 1 do items_before[reaper.GetTrackMediaItem(track, i)] = true end reaper.InsertMedia(output_file_path, 0) local new_item = nil for i = 0, reaper.CountTrackMediaItems(track) - 1 do local current_item = reaper.GetTrackMediaItem(track, i) if not items_before[current_item] then new_item = current_item break end end if new_item then reaper.SetMediaItemPosition(new_item, position, false) set_item_note_to_text(new_item, text) local suffix = string.format(" [Voice: %s]", voice_id) set_item_name_with_suffix(new_item, unique_filename, suffix) reaper.UpdateArrange() audio_generated = true break end else if reaper.file_exists(output_file_path) then os.remove(output_file_path) end end end end return audio_generated end function generate_from_selected_items() local selected_items_count = reaper.CountSelectedMediaItems(0) if selected_items_count == 0 then reaper.ShowMessageBox("No items selected.", "Error", 0) return end local dest_track = reaper.GetSelectedTrack(0, 0) if not dest_track then reaper.ShowMessageBox("No destination track selected. Please select a track to place the audio on.", "Error", 0) return end local items_to_process = {} for i = 0, selected_items_count - 1 do local item = reaper.GetSelectedMediaItem(0, i) local note = reaper.ULT_GetMediaItemNote(item) if note and note:match("%S") then local position = reaper.GetMediaItemInfo_Value(item, "D_POSITION") table.insert(items_to_process, {note=note, position=position}) end end if #items_to_process == 0 then reaper.ShowMessageBox("None of the selected items have notes.", "Info", 0) return end table.sort(items_to_process, function(a, b) return a.position < b.position end) reaper.Undo_BeginBlock() local success_count = 0 for _, data in ipairs(items_to_process) do if generate_single_audio(data.note, data.position, dest_track) then success_count = success_count + 1 end end if success_count == #items_to_process then reaper.Undo_EndBlock("Generate ElevenLabs TTS for " .. success_count .. " item(s)", 1) else reaper.Undo_EndBlock("Generate TTS (Partial or Total Failure)", -1) reaper.ShowMessageBox("Failed to generate audio for " .. (#items_to_process - success_count) .. " item(s). Please check your API key, Voice ID, and other settings.", "Error", 0) end end function generate_from_textbox() local track = reaper.GetSelectedTrack(0, 0) if not track and reaper.CountTracks(0) > 0 then track = reaper.GetTrack(0, 0) end if not track then reaper.ShowMessageBox("No track selected or available. Please select a track to insert the audio.", "Error", 0) return end reaper.Undo_BeginBlock() local success = generate_single_audio(input_text, reaper.GetCursorPosition(), track) if success then reaper.Undo_EndBlock("Generate ElevenLabs TTS", 1) else reaper.Undo_EndBlock("Generate TTS (Failed)", -1) reaper.ShowMessageBox("Failed to generate audio. Please check your API key and Voice ID.", "Error", 0) end end function loop() reaper.ImGui_SetNextWindowSize(reaper_imgui, 500, 300, reaper.ImGui_Cond_FirstUseEver()) local is_visible, is_open = reaper.ImGui_Begin(reaper_imgui, "ElevenLabs Text-to-Speech", true) if is_visible then local changed, new_text = reaper.ImGui_InputTextMultiline(reaper_imgui, "##input_text", input_text, 8192, -1, -85, 0, nil) if changed then input_text = new_text end if reaper.ImGui_Button(reaper_imgui, "Generate") then generate_from_textbox() end if reaper.ImGui_Button(reaper_imgui, "Generate from Selected Note(s)") then generate_from_selected_items() end if reaper.ImGui_Button(reaper_imgui, "Settings") then reaper.ImGui_OpenPopup(reaper_imgui, "Settings") end if reaper.ImGui_BeginPopupModal(reaper_imgui, "Settings", nil, reaper.ImGui_WindowFlags_AlwaysAutoResize()) then reaper.ImGui_Text(reaper_imgui, "API Keys (comma-separated):") local api_keys_changed, new_api_keys = reaper.ImGui_InputText(reaper_imgui, "##apikeys", api_keys_string, 4096) if api_keys_changed then api_keys_string = new_api_keys end reaper.ImGui_Text(reaper_imgui, "Voice ID:") local voice_id_changed, new_voice_id = reaper.ImGui_InputText(reaper_imgui, "##voiceid", voice_id, 128) if voice_id_changed then voice_id = new_voice_id end reaper.ImGui_Text(reaper_imgui, "Stability:") local stability_changed, new_stability = reaper.ImGui_InputText(reaper_imgui, "##stability", stability, 128) if stability_changed then stability = new_stability end reaper.ImGui_Text(reaper_imgui, "Similarity Boost:") local similarity_boost_changed, new_similarity_boost = reaper.ImGui_InputText(reaper_imgui, "##similarity", similarity_boost, 128) if similarity_boost_changed then similarity_boost = new_similarity_boost end reaper.ImGui_Separator(reaper_imgui) if reaper.ImGui_Button(reaper_imgui, "Save & Close", -1, 25) then save_settings() reaper.ImGui_CloseCurrentPopup(reaper_imgui) end reaper.ImGui_EndPopup(reaper_imgui) end reaper.ImGui_End(reaper_imgui) end if is_open then reaper.defer(loop) else save_settings() end end load_settings() loop()
